{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"rzk-project-template \u00b6 Template for a formalisation project in rzk proof assistant. How to check \u00b6 From the root of the project's repository, run: rzk typecheck src/**/*.rzk.md","title":"General"},{"location":"#rzk-project-template","text":"Template for a formalisation project in rzk proof assistant.","title":"rzk-project-template"},{"location":"#how-to-check","text":"From the root of the project's repository, run: rzk typecheck src/**/*.rzk.md","title":"How to check"},{"location":"1-2.rzk/","text":"Exercise 1.2 \u00b6 Task \u00b6 Derive the recursion principle for products \\(rec_{A \\times B}\\) using only the projections, and verify that the definitional equalities are valid. Do the same for \\(\\Sigma\\) -types. Solution \u00b6 Product \\(A \\times B\\) \u00b6 Introducing definitions #lang rzk-1 #def id ( A : U ) : A -> A := \\ a -> a #def prod ( A B : U ) : U := Sigma ( _ : A), B #def pair ( A B : U ) : A -> B -> prod A B := \\ a b -> (a, b) Defining recursion on \\(A \\times B\\) through projections #def pr1 ( A B : U ) : prod A B -> A := \\(a, b) -> a #def pr2 ( A B : U ) : prod A B -> B := \\(a, b) -> b -- rec_AxB((C: U), (g: A -> B -> C), (p: AxB)) #def rec_prod ( A B : U ) ( C : U ) : ( g : A -> B -> C) -> ( p : prod A B) -> C := \\ g p -> g (pr1 A B p) (pr2 A B p) Defining projections through a recursion on \\(A \\times B\\) -- other way #def rec_prod_rev ( A B : U ) ( C : U ) : ( g : A -> B -> C) -> ( p : prod A B) -> C := \\ g (a, b) -> g a b #def pr1_rev ( A B : U ) : prod A B -> A := rec_prod_rev A B A ( \\ a b -> a) #def pr2_rev ( A B : U ) : prod A B -> B := rec_prod_rev A B B ( \\ a b -> b) Checking definitional equalities -- recursion from projections #def rec_from_pr_def_eq ( A B C : U ) ( g : A -> B -> C) ( a : A) ( b : B) : rec_prod A B C g (pair A B a b) = g a b := refl -- projections from recursion #def pr_1_from_rec_def_eq ( A B : U ) ( a : A) ( b : B) : pr1 A B (pair A B a b) = a := refl #def pr_2_from_rec_def_eq ( A B : U ) ( a : A) ( b : B) : pr2 A B (pair A B a b) = b := refl Dependant pairs \u00b6 Sigma types are built-in, so we head right into the exercise. Defining projections and recursion #def pr1_sigma ( A : U ) ( B : A -> U ) : ( Sigma (x : A), (B x)) -> A := \\ p -> first p #def pr2_sigma ( A : U ) ( B : A -> U ) : ( p : Sigma ( x : A), (B x)) -> (B ( first p)) := \\ p -> second p -- rec_AxB((C: U), (g: A -> B -> C), (p: AxB)) #def rec_sigma ( A : U ) ( B : A -> U ) ( C : U ) : ( g : ( x : A) -> B x -> C) -> ( p : Sigma ( x : A), (B x)) -> C := \\ g p -> g (pr1_sigma A B p) (pr2_sigma A B p) Checking the definitional equality #def rec_sigma_from_pr_def_eq ( A : U ) ( B : A -> U ) ( C : U ) ( g : ( x : A) -> B x -> C) ( a : A) ( b : B a) : rec_sigma A B C g (a, b) = g a b := refl","title":"Exercise 1.2"},{"location":"1-2.rzk/#exercise-12","text":"","title":"Exercise 1.2"},{"location":"1-2.rzk/#task","text":"Derive the recursion principle for products \\(rec_{A \\times B}\\) using only the projections, and verify that the definitional equalities are valid. Do the same for \\(\\Sigma\\) -types.","title":"Task"},{"location":"1-2.rzk/#solution","text":"","title":"Solution"},{"location":"1-2.rzk/#product-a-times-b","text":"Introducing definitions #lang rzk-1 #def id ( A : U ) : A -> A := \\ a -> a #def prod ( A B : U ) : U := Sigma ( _ : A), B #def pair ( A B : U ) : A -> B -> prod A B := \\ a b -> (a, b) Defining recursion on \\(A \\times B\\) through projections #def pr1 ( A B : U ) : prod A B -> A := \\(a, b) -> a #def pr2 ( A B : U ) : prod A B -> B := \\(a, b) -> b -- rec_AxB((C: U), (g: A -> B -> C), (p: AxB)) #def rec_prod ( A B : U ) ( C : U ) : ( g : A -> B -> C) -> ( p : prod A B) -> C := \\ g p -> g (pr1 A B p) (pr2 A B p) Defining projections through a recursion on \\(A \\times B\\) -- other way #def rec_prod_rev ( A B : U ) ( C : U ) : ( g : A -> B -> C) -> ( p : prod A B) -> C := \\ g (a, b) -> g a b #def pr1_rev ( A B : U ) : prod A B -> A := rec_prod_rev A B A ( \\ a b -> a) #def pr2_rev ( A B : U ) : prod A B -> B := rec_prod_rev A B B ( \\ a b -> b) Checking definitional equalities -- recursion from projections #def rec_from_pr_def_eq ( A B C : U ) ( g : A -> B -> C) ( a : A) ( b : B) : rec_prod A B C g (pair A B a b) = g a b := refl -- projections from recursion #def pr_1_from_rec_def_eq ( A B : U ) ( a : A) ( b : B) : pr1 A B (pair A B a b) = a := refl #def pr_2_from_rec_def_eq ( A B : U ) ( a : A) ( b : B) : pr2 A B (pair A B a b) = b := refl","title":"Product \\(A \\times B\\)"},{"location":"1-2.rzk/#dependant-pairs","text":"Sigma types are built-in, so we head right into the exercise. Defining projections and recursion #def pr1_sigma ( A : U ) ( B : A -> U ) : ( Sigma (x : A), (B x)) -> A := \\ p -> first p #def pr2_sigma ( A : U ) ( B : A -> U ) : ( p : Sigma ( x : A), (B x)) -> (B ( first p)) := \\ p -> second p -- rec_AxB((C: U), (g: A -> B -> C), (p: AxB)) #def rec_sigma ( A : U ) ( B : A -> U ) ( C : U ) : ( g : ( x : A) -> B x -> C) -> ( p : Sigma ( x : A), (B x)) -> C := \\ g p -> g (pr1_sigma A B p) (pr2_sigma A B p) Checking the definitional equality #def rec_sigma_from_pr_def_eq ( A : U ) ( B : A -> U ) ( C : U ) ( g : ( x : A) -> B x -> C) ( a : A) ( b : B a) : rec_sigma A B C g (a, b) = g a b := refl","title":"Dependant pairs"}]}